#Establish an ssh connection to the Azure instances

ssh <username>@<INSTANCE_NAME>.westeurope.cloudapp.azure.com

#First time setup for Azure instances: (install scala, sbt, git, java)

#SCALA

SCALA_VERSION="2.12.1"
wget http://downloads.typesafe.com/scala/${SCALA_VERSION}/scala-${SCALA_VERSION}.tgz
tar -xzvf scala-${SCALA_VERSION}.tgz
rm -rf scala-${SCALA_VERSION}.tgz
echo "export SCALA_HOME=/home/ec2-user/scala-${SCALA_VERSION}" >> ~/.bashrc
echo "export PATH=$PATH:/home/ec2-user/scala-${SCALA_VERSION}/bin" >> ~/.bashrc
source ~/.bashrc

#JAVA <Ubuntu 16.04 LTS>
sudo apt-get install openjdk-8-jdk openjdk-8-demo openjdk-8-jre-headless

#SBT <Ubuntu 16.04 LTS>
echo "deb https://dl.bintray.com/sbt/debian /" | sudo tee -a /etc/apt/sources.list.d/sbt.list
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823
sudo apt-get update
sudo apt-get install sbt

#Clone the repository, switch the directory and chackout the correct branch

git clone <insert repository url> #https://github.com/pweisenburger/AdaptiveCEP.git
              cd AdaptiveCEP
git checkout privacy-preserved

#export local and global IPs for usage in the code

export GLOBALIP=$(curl ipecho.net/plain)
export LOCALIP=$(hostname -I)

#export SBT_OPTS="-Xmx512M" only needed for weak instances (otherwise sbt might try to take more memory than is available)

#start sbt and run the empty host (needed to establish the cluster)
#make sure to start it first on the node that is the cluster root

sbt
runMain adaptivecep.distributed.HostSystem node
runMain adaptivecep.distributed.centralized.AppRunnerCentralized
bash setup.bash
bash start.bash

export GLOBALIP=$(curl ipecho.net/plain)
export LOCALIP=$(hostname -I)


export GLOBALIP=$(curl ipecho.net/plain)
export LOCALIP=$(hostname -I)


cd AdaptiveCEP

git pull
sbt
runMain adaptivecep.distributed.HostSystem node

cd AdaptiveCEP
git pull
java -jar CEP.jar

git reset --hard origin/temp


export SBT_OPTS="-Xmx512M"
#ADD THOSE TO the machine .bashrc file
export GLOBALIP=$(curl ipecho.net/plain)
export LOCALIP=$(hostname -I)

export HOST1="40.115.4.25"
export HOST2="52.142.195.235"
export HOST3="52.142.195.251"
export HOST4="13.80.151.52"

export HOST5="3.16.206.96"
export HOST6="18.221.95.245"
export HOST7="52.15.108.225"
export HOST8="18.216.144.166"
export HOST9="52.14.111.157"
export HOST10="3.19.57.155"
export HOST11="18.191.128.192"
export HOST12="3.17.130.64"
export HOST13="3.16.55.193"
export HOST14="3.17.130.143"
export HOST15="18.221.14.166"
export HOST16="3.16.36.225"
export HOST17="18.217.119.52"
export HOST18="3.15.37.2"
export HOST19="18.220.229.241"
export HOST20="3.16.193.175"

#paste the ips of all hosts into the consumer hosts (needed to start al hosts and establish the network)




export HOST1="18.219.222.126"
export HOST2=""
export HOST3=""
export HOST4=""
export HOST5=""
export HOST6=""
export HOST7=""
export HOST8=""
export HOST9=""
export HOST10=""
export HOST11=""
export HOST12=""
export HOST13=""
export HOST14=""
export HOST15=""
export HOST16=""
export HOST17=""
export HOST18=""
export HOST19=""
export HOST20="3.16.193.175"


# to build jar file use

sbt "set test in assembly := {}" clean assembly #ignores tests



#Deploy on SGX-LKL
 sudo iptables -t nat -D PREROUTING 2

 sudo sysctl -w net.ipv4.ip_forward=1

sudo iptables -t nat -I PREROUTING -p tcp -d `hostname -i` --dport 8000 -j DNAT --to-destination 10.0.1.1:8000


# Secure scala


git clone https://github.com/allprojects/securescala.git
#switch to branch libope-libssl.1.0
git checkout libope-libssl-1.1.0

make

#Copy libope.so to /usr/lib and run ldconfig -n -v /usr/lib to install it and create all necessary links.

sudo cp libope.so /usr/lib/
sudo ldconfig -n -v /usr/lib